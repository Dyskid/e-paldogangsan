import axios from 'axios';
import * as cheerio from 'cheerio';
import * as fs from 'fs';

interface Product {
  id: string;
  title: string;
  price: string;
  originalPrice?: string;
  image: string;
  url: string;
  category: string;
  mall: string;
  region: string;
  tags: string[];
  description?: string;
  inStock: boolean;
}

async function scrapeGoesanQuick() {
  console.log('üöÄ Starting quick Goesan Marketplace scraping...');
  
  const baseUrl = 'https://www.gsjangter.go.kr';
  const products: Product[] = [];

  // Based on the successful scraping output, I'll use a subset of product IDs
  const productIds = [
    'G2000484012', 'G2000483563', 'G2000483530', 'G2000483309', 'G2000483308', 
    'G2000483307', 'G2000483249', 'G2000483206', 'G2000483051', 'G2000482849',
    'G2000482225', 'G2000484060', 'G2000484128', 'G2000484007', 'G2000483886',
    'G2000484003', 'G2000484009', 'G2000483873', 'G2000483878', 'G2000482059',
    'G2000483168', 'G2000483448', 'G2000482229', 'G2000482162', 'G2000483375',
    'G2000483861', 'G2000482164', 'G2000482060', 'G2000484131', 'G2000482544',
    'G2000484129', 'G2000482389', 'G2000483621', 'G2000484120', 'G2000483659',
    'G2000483702', 'G2000483603', 'G2000483692', 'G2000483569', 'G2000483927',
    'G2000483484', 'G2000483667', 'G2000483924', 'G2000483450', 'G2000483487',
    'G2000484013', 'G2000482961', 'G2000483940'
  ];

  const headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
  };

  console.log(`üì¶ Processing ${productIds.length} products...`);

  for (let i = 0; i < productIds.length; i++) {
    const productId = productIds[i];
    
    try {
      console.log(`üì¶ Processing ${i + 1}/${productIds.length}: ${productId}`);

      const productUrl = `${baseUrl}/products/view/${productId}`;
      const response = await axios.get(productUrl, {
        timeout: 10000,
        headers,
        validateStatus: (status) => status < 500
      });

      if (response.status >= 400) {
        console.log(`‚ö†Ô∏è HTTP ${response.status} for product ${productId}`);
        continue;
      }

      const $ = cheerio.load(response.data);

      // Extract title
      let title = '';
      const titleSelectors = ['.prd_name', '#itemTitle', '.name', 'h1'];
      for (const selector of titleSelectors) {
        const element = $(selector).first();
        if (element.length > 0) {
          const text = element.text().trim();
          if (text && text.length > 2 && !text.includes('ÎåÄÎ©îÎâ¥')) {
            title = text;
            break;
          }
        }
      }

      if (!title) {
        const pageTitle = $('title').text();
        if (pageTitle) {
          title = pageTitle.replace('Í¥¥ÏÇ∞Íµ∞Ï≤≠Í≥µÏãùÎ™∞ Í¥¥ÏÇ∞Ïû•ÌÑ∞', '').trim();
        }
      }

      if (!title) {
        console.log('‚ùå No title found, skipping...');
        continue;
      }

      // Extract price
      let price = '';
      const salePrice = $('.set_prc .point').first();
      if (salePrice.length > 0) {
        const priceText = salePrice.text().trim();
        if (priceText && priceText.length > 0) {
          price = priceText + 'Ïõê';
        }
      }

      if (!price) {
        const originalPrice = $('.item_prc span').first();
        if (originalPrice.length > 0) {
          const priceText = originalPrice.text().trim();
          if (priceText && priceText.length > 0) {
            price = priceText + 'Ïõê';
          }
        }
      }

      if (!price) {
        const priceSelectors = ['.set_price strong', '.price'];
        for (const selector of priceSelectors) {
          const element = $(selector).first();
          if (element.length > 0) {
            const text = element.text().trim();
            if (text && text.length > 0 && !text.includes('0')) {
              price = text.includes('Ïõê') ? text : text + 'Ïõê';
              break;
            }
          }
        }
      }

      if (!price) {
        console.log('‚ùå No price found, skipping...');
        continue;
      }

      // Clean and format price
      const priceMatch = price.match(/[\d,]+/);
      if (!priceMatch) {
        console.log('‚ùå Invalid price format, skipping...');
        continue;
      }

      const numericPrice = parseInt(priceMatch[0].replace(/,/g, ''));
      if (numericPrice <= 0) {
        console.log('‚ùå Invalid price value, skipping...');
        continue;
      }
      
      const formattedPrice = `${numericPrice.toLocaleString()}Ïõê`;

      // Extract image
      let image = '';
      const imgSelectors = ['img[src*="item"]', '.thumbnail img', '.prd_img img'];
      for (const selector of imgSelectors) {
        const element = $(selector).first();
        if (element.length > 0) {
          const src = element.attr('src');
          if (src) {
            image = src.startsWith('http') ? src : `${baseUrl}${src}`;
            break;
          }
        }
      }

      // Determine category
      let category = 'ÎÜçÌäπÏÇ∞Ìíà';
      const titleLower = title.toLowerCase();
      
      if (titleLower.includes('ÏåÄ') || titleLower.includes('ÌòÑÎØ∏') || titleLower.includes('Ï∞πÏåÄ') || titleLower.includes('ÎàÑÎ£Ω')) {
        category = 'ÏåÄ/Í≥°Î•ò';
      } else if (titleLower.includes('Î∞∞Ï∂î') || titleLower.includes('ÍπÄÏπò') || titleLower.includes('Ï†àÏûÑ')) {
        category = 'ÍπÄÏπò/Ï†àÏûÑÎ•ò';
      } else if (titleLower.includes('Î∏åÎ°úÏΩúÎ¶¨') || titleLower.includes('ÎãπÍ∑º') || titleLower.includes('ÏñëÌåå') || titleLower.includes('Ï±ÑÏÜå')) {
        category = 'Ï±ÑÏÜåÎ•ò';
      } else if (titleLower.includes('Í≥†Íµ¨Îßà') || titleLower.includes('Í∞êÏûê') || titleLower.includes('ÎëêÎ∞±')) {
        category = 'Ï±ÑÏÜåÎ•ò';
      } else if (titleLower.includes('ÏÇ¨Í≥º') || titleLower.includes('Î∞∞') || titleLower.includes('Ìè¨ÎèÑ') || titleLower.includes('Î≥µÏà≠ÏïÑ') || titleLower.includes('Ïò§Îîî') || titleLower.includes('Îß§Ïã§')) {
        category = 'Í≥ºÏùºÎ•ò';
      } else if (titleLower.includes('ÎêúÏû•') || titleLower.includes('Í≥†Ï∂îÏû•') || titleLower.includes('Í∞ÑÏû•') || titleLower.includes('Î©îÏ£º')) {
        category = 'Î∞úÌö®ÏãùÌíà';
      } else if (titleLower.includes('Îì§Í∏∞Î¶Ñ') || titleLower.includes('Ï∞∏Í∏∞Î¶Ñ')) {
        category = 'Í∏∞Î¶Ñ/Ï∞∏Íπ®';
      } else if (titleLower.includes('ÍøÄ') || titleLower.includes('Ïûº')) {
        category = 'Í∞ÄÍ≥µÏãùÌíà';
      } else if (titleLower.includes('ÌïúÏïΩ') || titleLower.includes('ÏïΩÏ¥à')) {
        category = 'Í±¥Í∞ïÏãùÌíà';
      } else if (titleLower.includes('Î≤ÑÏÑØ') || titleLower.includes('ÌëúÍ≥†')) {
        category = 'Î≤ÑÏÑØÎ•ò';
      } else if (titleLower.includes('Í≥†Ï∂ßÍ∞ÄÎ£®') || titleLower.includes('Í±¥Í≥†Ï∂î') || titleLower.includes('ÌôçÍ≥†Ï∂î')) {
        category = 'Ï°∞ÎØ∏Î£å';
      } else if (titleLower.includes('Ïò•ÏàòÏàò')) {
        category = 'Í≥°Î•ò';
      }

      // Generate tags
      const tags = ['Í¥¥ÏÇ∞ÌäπÏÇ∞Ìíà', 'Ï∂©Î∂ÅÌäπÏÇ∞Ìíà'];
      
      if (titleLower.includes('Ïú†Í∏∞ÎÜç') || titleLower.includes('ÏπúÌôòÍ≤Ω')) tags.push('ÏπúÌôòÍ≤Ω');
      if (titleLower.includes('Ï†ÑÌÜµ')) tags.push('Ï†ÑÌÜµ');
      if (titleLower.includes('ÏàòÏ†ú')) tags.push('ÏàòÏ†ú');
      if (titleLower.includes('Íµ≠ÎÇ¥ÏÇ∞') || titleLower.includes('Íµ≠ÏÇ∞')) tags.push('Íµ≠ÎÇ¥ÏÇ∞');
      if (titleLower.includes('ÎÜçÌòë')) tags.push('ÎÜçÌòë');
      if (titleLower.includes('Ìñá')) tags.push('Ìñá');
      if (titleLower.includes('Ïã†ÏÑ†')) tags.push('Ïã†ÏÑ†');
      if (titleLower.includes('ÎãπÏùºÏàòÌôï')) tags.push('ÎãπÏùºÏàòÌôï');
      if (titleLower.includes('haccp')) tags.push('HACCP');

      const product: Product = {
        id: `goesan_${productId}`,
        title: title,
        price: formattedPrice,
        image: image,
        url: productUrl,
        category: category,
        mall: 'Í¥¥ÏÇ∞Ïû•ÌÑ∞',
        region: 'Ï∂©Ï≤≠Î∂ÅÎèÑ',
        tags: tags,
        inStock: true
      };

      products.push(product);

      console.log(`‚úÖ ${title} - ${formattedPrice} (${category})`);

      // Rate limiting
      await new Promise(resolve => setTimeout(resolve, 1000));

    } catch (error: any) {
      console.error(`‚ùå Error scraping product ${productId}:`, error.message);
      continue;
    }
  }

  console.log(`\nüéâ Scraping completed! Total products: ${products.length}`);

  // Save results
  const summary = {
    timestamp: new Date().toISOString(),
    totalProducts: products.length,
    mall: 'Í¥¥ÏÇ∞Ïû•ÌÑ∞',
    region: 'Ï∂©Ï≤≠Î∂ÅÎèÑ',
    categories: [...new Set(products.map(p => p.category))],
    averagePrice: products.length > 0 ? Math.round(products.reduce((sum, p) => sum + parseInt(p.price.replace(/[^\d]/g, '')), 0) / products.length) : 0,
    priceRange: {
      min: products.length > 0 ? Math.min(...products.map(p => parseInt(p.price.replace(/[^\d]/g, '')))) : 0,
      max: products.length > 0 ? Math.max(...products.map(p => parseInt(p.price.replace(/[^\d]/g, '')))) : 0
    }
  };

  // Save products
  fs.writeFileSync(
    '/mnt/c/Users/johndoe/Desktop/e-paldogangsan/scripts/output/goesan-products.json',
    JSON.stringify(products, null, 2)
  );

  // Save summary
  fs.writeFileSync(
    '/mnt/c/Users/johndoe/Desktop/e-paldogangsan/scripts/output/goesan-scrape-summary.json',
    JSON.stringify(summary, null, 2)
  );

  console.log(`üíæ Products saved to: goesan-products.json`);
  console.log(`üìä Summary saved to: goesan-scrape-summary.json`);

  return { products, summary };
}

// Run the scraper
scrapeGoesanQuick().catch(console.error);