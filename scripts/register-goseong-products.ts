import * as fs from 'fs';
import * as path from 'path';

interface Product {
  id: string;
  title: string;
  price: string;
  imageUrl: string;
  productUrl: string;
  category: string;
  vendor: string;
  description: string;
  mallId: string;
  mallName: string;
  mallUrl: string;
  region: string;
}

interface MainProduct {
  id: string;
  title: string;
  price: number;
  imageUrl: string;
  productUrl: string;
  category: string;
  description: string;
  mallId: string;
  mallName: string;
  mallUrl: string;
  region: string;
  tags: string[];
  featured: boolean;
  isNew: boolean;
  clickCount: number;
  lastVerified: string;
}

function parsePrice(priceStr: string): number {
  // Clean the price string and extract the final price
  const cleanPrice = priceStr.replace(/[^0-9,‚Ç©%]/g, '');
  const numbers = cleanPrice.match(/[\d,]+/g);
  
  if (!numbers || numbers.length === 0) return 0;
  
  // If multiple prices (discount scenario), take the last one (final price)
  const finalPriceStr = numbers[numbers.length - 1];
  const price = parseInt(finalPriceStr.replace(/,/g, ''), 10);
  
  return isNaN(price) ? 0 : price;
}

function categorizeProduct(title: string): { category: string; tags: string[] } {
  const lowerTitle = title.toLowerCase();
  
  // Seafood products (primary specialty of Goseong)
  if (lowerTitle.includes('Ïû•Ïñ¥') || lowerTitle.includes('ÎØºÎ¨ºÏû•Ïñ¥')) {
    return { category: 'ÏàòÏÇ∞Î¨º/Ïû•Ïñ¥', tags: ['Ïû•Ïñ¥', 'ÎØºÎ¨ºÏû•Ïñ¥', 'ÏàòÏÇ∞Î¨º', 'Í≥†ÏÑ±ÌäπÏÇ∞', 'ÎèôÌï¥ÌäπÏÇ∞'] };
  }
  
  if (lowerTitle.includes('Ìô©ÌÉú') || lowerTitle.includes('ÏΩîÎã§Î¶¨') || lowerTitle.includes('Î™ÖÌÉú')) {
    return { category: 'ÏàòÏÇ∞Î¨º/Í±¥Ïñ¥Î¨º', tags: ['Ìô©ÌÉú', 'ÏΩîÎã§Î¶¨', 'Î™ÖÌÉú', 'Í±¥Ïñ¥Î¨º', 'Í≥†ÏÑ±ÌäπÏÇ∞', 'ÎèôÌï¥ÌäπÏÇ∞'] };
  }
  
  if (lowerTitle.includes('ÏÑ±Í≤å') || lowerTitle.includes('Ïö∞Îãà')) {
    return { category: 'ÏàòÏÇ∞Î¨º/ÏÑ±Í≤å', tags: ['ÏÑ±Í≤å', 'Ïö∞Îãà', 'ÏàòÏÇ∞Î¨º', 'Í≥†ÏÑ±ÌäπÏÇ∞', 'ÎèôÌï¥ÌäπÏÇ∞', 'Ïù¥Ïä§Î∞©'] };
  }
  
  if (lowerTitle.includes('Î¨∏Ïñ¥') || lowerTitle.includes('Ìï¥ÏÇº') || lowerTitle.includes('Í∞ÄÏûêÎØ∏') || 
      lowerTitle.includes('ÏñëÎØ∏Î¶¨') || lowerTitle.includes('Î®πÌÉú')) {
    return { category: 'ÏàòÏÇ∞Î¨º/Ìï¥ÏÇ∞Î¨º', tags: ['Î¨∏Ïñ¥', 'Ìï¥ÏÇº', 'Í∞ÄÏûêÎØ∏', 'ÏñëÎØ∏Î¶¨', 'Î®πÌÉú', 'ÏàòÏÇ∞Î¨º', 'Í≥†ÏÑ±ÌäπÏÇ∞', 'ÎèôÌï¥ÌäπÏÇ∞'] };
  }
  
  if (lowerTitle.includes('Ï†ìÍ∞à') || lowerTitle.includes('Î™ÖÎûÄ')) {
    return { category: 'ÏàòÏÇ∞Î¨º/Ï†ìÍ∞à', tags: ['Ï†ìÍ∞à', 'Î™ÖÎûÄ', 'Î∞úÌö®ÏãùÌíà', 'ÏàòÏÇ∞Î¨º', 'Í≥†ÏÑ±ÌäπÏÇ∞'] };
  }
  
  // Agricultural products
  if (lowerTitle.includes('ÏåÄ') || lowerTitle.includes('Ï∞πÏåÄ') || lowerTitle.includes('ÎØ∏')) {
    return { category: 'ÎÜçÏÇ∞Î¨º/Í≥°Î•ò', tags: ['ÏåÄ', 'Ï∞πÏåÄ', 'Í≥°Î•ò', 'Í≥†ÏÑ±ÎÜçÌòë', 'Ïò§ÎåÄÎØ∏', 'ÎÜçÏÇ∞Î¨º'] };
  }
  
  if (lowerTitle.includes('ÏÉùÍ∞ï') || lowerTitle.includes('ÏßÑÏ†Ä')) {
    return { category: 'ÎÜçÏÇ∞Î¨º/ÏÉùÍ∞ï', tags: ['ÏÉùÍ∞ï', 'ÏÉùÍ∞ïÏ≤≠', 'ÎÜçÏÇ∞Î¨º', 'Í±¥Í∞ïÏãùÌíà', 'Í≥†ÏÑ±ÌäπÏÇ∞'] };
  }
  
  if (lowerTitle.includes('Î∏îÎ£®Î≤†Î¶¨') || lowerTitle.includes('Ïûº')) {
    return { category: 'ÎÜçÏÇ∞Î¨º/Í∞ÄÍ≥µÏãùÌíà', tags: ['Î∏îÎ£®Î≤†Î¶¨', 'Ïûº', 'Í∞ÄÍ≥µÏãùÌíà', 'ÎÜçÏÇ∞Î¨º', 'Ïú†Í∏∞ÎÜç'] };
  }
  
  if (lowerTitle.includes('Îì§Í∏∞Î¶Ñ') || lowerTitle.includes('Í∏∞Î¶Ñ')) {
    return { category: 'ÎÜçÏÇ∞Î¨º/Í∏∞Î¶Ñ', tags: ['Îì§Í∏∞Î¶Ñ', 'Ï†ÄÏò®ÏïïÏ∞©', 'ÎÜçÏÇ∞Î¨º', 'Í±¥Í∞ïÏãùÌíà'] };
  }
  
  if (lowerTitle.includes('ÍøÄ') || lowerTitle.includes('ÏïÑÏπ¥ÏãúÏïÑ')) {
    return { category: 'ÎÜçÏÇ∞Î¨º/ÍøÄ', tags: ['ÍøÄ', 'ÏïÑÏπ¥ÏãúÏïÑ', 'ÏïºÏÉùÌôî', 'Ï≤úÏó∞Í∞êÎØ∏Î£å', 'ÎÜçÏÇ∞Î¨º'] };
  }
  
  if (lowerTitle.includes('Í≥ÑÎûÄ') || lowerTitle.includes('ÎûÄ') || lowerTitle.includes('Ï≤≠ÎûÄ')) {
    return { category: 'ÎÜçÏÇ∞Î¨º/Ï∂ïÏÇ∞', tags: ['Í≥ÑÎûÄ', 'Ï≤≠ÎûÄ', 'ÏûêÏó∞Î∞©ÏÇ¨', 'Ï∂ïÏÇ∞Î¨º', 'ÎÜçÏÇ∞Î¨º'] };
  }
  
  // Pet products
  if (lowerTitle.includes('Í∞ïÏïÑÏßÄ') || lowerTitle.includes('Î∞òÎ†§') || lowerTitle.includes('Í∞ÑÏãù')) {
    return { category: 'Î∞òÎ†§ÎèôÎ¨ºÏö©Ìíà', tags: ['Í∞ïÏïÑÏßÄÍ∞ÑÏãù', 'Î∞òÎ†§ÎèôÎ¨º', 'ÏàòÏ†úÍ∞ÑÏãù', 'Í±¥Ï°∞Í∞ÑÏãù'] };
  }
  
  // Chocolate/desserts
  if (lowerTitle.includes('Ï¥àÏΩî') || lowerTitle.includes('ÏÇ¥ÎùºÎØ∏') || lowerTitle.includes('Ï¥àÏΩúÎ¶ø')) {
    return { category: 'ÎîîÏ†ÄÌä∏/Í∞ÑÏãù', tags: ['Ï¥àÏΩî', 'ÏÇ¥ÎùºÎØ∏', 'ÎîîÏ†ÄÌä∏', 'Í∞ÑÏãù', 'ÏàòÏûÖÏãùÌíà'] };
  }
  
  return { category: 'Í≥†ÏÑ±ÌäπÏÇ∞Ìíà', tags: ['Í≥†ÏÑ±ÌäπÏÇ∞', 'Í∞ïÏõêÎèÑÌäπÏÇ∞'] };
}

async function registerGoseongProducts() {
  console.log('üöÄ Starting Goseong Mall product registration...');
  
  try {
    // Read scraped products
    const goseongDataPath = path.join(__dirname, 'output/goseong-products.json');
    if (!fs.existsSync(goseongDataPath)) {
      throw new Error('Goseong products file not found. Please run the scraper first.');
    }
    
    const goseongData = fs.readFileSync(goseongDataPath, 'utf-8');
    const goseongProducts: Product[] = JSON.parse(goseongData);
    console.log(`üìã Found ${goseongProducts.length} scraped Goseong products`);
    
    // Read existing products
    const productsPath = path.join(__dirname, '../src/data/products.json');
    let existingProducts: MainProduct[] = [];
    
    if (fs.existsSync(productsPath)) {
      const productsData = fs.readFileSync(productsPath, 'utf-8');
      existingProducts = JSON.parse(productsData);
      console.log(`üì¶ Found ${existingProducts.length} existing products`);
    }
    
    // Remove existing Goseong products
    const nonGoseongProducts = existingProducts.filter(p => p.mallId !== 'goseong');
    console.log(`üóëÔ∏è Removed ${existingProducts.length - nonGoseongProducts.length} existing Goseong products`);
    
    // Process and register new products
    const newProducts: MainProduct[] = [];
    let registeredCount = 0;
    let skippedCount = 0;
    
    for (const product of goseongProducts) {
      const price = parsePrice(product.price);
      
      if (price === 0) {
        console.log(`‚ö†Ô∏è Skipping product with invalid price: ${product.title} - ${product.price}`);
        skippedCount++;
        continue;
      }
      
      const { category, tags } = categorizeProduct(product.title);
      
      const newProduct: MainProduct = {
        id: `goseong-${product.id}`,
        title: product.title,
        price: price,
        imageUrl: product.imageUrl,
        productUrl: product.productUrl,
        category: category,
        description: product.description,
        mallId: 'goseong',
        mallName: 'Í≥†ÏÑ±Î™∞',
        mallUrl: 'https://gwgoseong-mall.com',
        region: 'Í∞ïÏõêÎèÑ Í≥†ÏÑ±Íµ∞',
        tags: tags,
        featured: registeredCount < 3, // First 3 products as featured
        isNew: true,
        clickCount: 0,
        lastVerified: new Date().toISOString()
      };
      
      newProducts.push(newProduct);
      registeredCount++;
      
      console.log(`‚úÖ ${registeredCount}/${goseongProducts.length} Registered: ${newProduct.title} - ${price.toLocaleString()}Ïõê (${category})`);
    }
    
    // Combine with existing non-Goseong products
    const allProducts = [...nonGoseongProducts, ...newProducts];
    
    // Save updated products
    fs.writeFileSync(productsPath, JSON.stringify(allProducts, null, 2), 'utf-8');
    
    // Create registration summary
    const summary = {
      timestamp: new Date().toISOString(),
      mallName: 'Í≥†ÏÑ±Î™∞',
      mallId: 'goseong',
      totalProcessed: goseongProducts.length,
      successfullyRegistered: registeredCount,
      skipped: skippedCount,
      totalProducts: allProducts.length,
      categories: [...new Set(newProducts.map(p => p.category))],
      priceRange: {
        min: Math.min(...newProducts.map(p => p.price)),
        max: Math.max(...newProducts.map(p => p.price)),
        average: Math.round(newProducts.reduce((sum, p) => sum + p.price, 0) / newProducts.length)
      },
      specialties: {
        seafood: newProducts.filter(p => p.category.includes('ÏàòÏÇ∞Î¨º')).length,
        agriculture: newProducts.filter(p => p.category.includes('ÎÜçÏÇ∞Î¨º')).length,
        fermented: newProducts.filter(p => p.title.includes('Ï†ìÍ∞à') || p.title.includes('ÏÉùÍ∞ïÏ≤≠')).length
      },
      sampleProducts: newProducts.slice(0, 5).map(p => ({
        title: p.title,
        price: p.price,
        category: p.category,
        tags: p.tags
      }))
    };
    
    const summaryPath = path.join(__dirname, 'output/goseong-registration-summary.json');
    fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2), 'utf-8');
    
    console.log('\nüìä Registration Summary:');
    console.log(`‚úÖ Successfully registered: ${registeredCount} products`);
    console.log(`‚è≠Ô∏è Skipped: ${skippedCount} products`);
    console.log(`üì¶ Total products in database: ${allProducts.length}`);
    console.log(`üè∑Ô∏è Categories: ${summary.categories.join(', ')}`);
    console.log(`üí∞ Price range: ${summary.priceRange.min.toLocaleString()}Ïõê - ${summary.priceRange.max.toLocaleString()}Ïõê`);
    console.log(`üêü Seafood products: ${summary.specialties.seafood}`);
    console.log(`üåæ Agricultural products: ${summary.specialties.agriculture}`);
    console.log(`ü•í Fermented products: ${summary.specialties.fermented}`);
    console.log(`üíæ Summary saved to: ${summaryPath}`);
    
  } catch (error) {
    console.error('‚ùå Error during registration:', error);
    throw error;
  }
}

// Run the registration
registerGoseongProducts()
  .then(() => {
    console.log('üéâ Goseong Mall product registration completed successfully!');
  })
  .catch((error) => {
    console.error('üí• Registration failed:', error);
    process.exit(1);
  });