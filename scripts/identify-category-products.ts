import { readFileSync, writeFileSync } from 'fs';
import { Product } from '../src/types';

function identifyCategoryProducts() {
  console.log('üîç Identifying category names registered as products...\n');
  
  // Read products from database
  const productsData = readFileSync('./src/data/products.json', 'utf-8');
  const products: Product[] = JSON.parse(productsData);
  
  console.log(`üìä Total products in database: ${products.length}`);
  
  // Common category patterns that should NOT be registered as products
  const categoryPatterns = [
    // Korean category names
    /^ÏãùÌíà\/ÎÜçÏÇ∞Ìíà$/,
    /^ÏåÄ\/ÎÜçÏ∂ïÏÇ∞Î¨º$/,
    /^Ï∞®\/ÏùåÎ£å\/Í≥ºÏûê\/Í∞ÄÍ≥µÏãùÌíà$/,
    /^Í±¥Í∞ïÏãùÌíà\/Îã§Ïù¥Ïñ¥Ìä∏$/,
    /^ÏÉùÌôúÏö©Ìíà$/,
    /^Í∞ÄÍµ¨\/Ïù∏ÌÖåÎ¶¨Ïñ¥$/,
    /^Ïπ®Íµ¨\/Ïª§Ìäº\/ÏÜåÌíà$/,
    /^Ï£ºÎ∞©\/ÏÉùÌôú\/ÏàòÎÇ©Ïö©Ìíà$/,
    /^ÏõêÏòà\/ÏÑ†Î¨º$/,
    /^Í±¥Í∞ï\/ÎØ∏Ïö©$/,
    /^ÏÇ¨Î¨¥Ïö©Ìíà$/,
    /^Î≥µÏÇ¨Ïö©ÏßÄ\/ÌÜ†ÎÑàÎ•ò$/,
    /^Î¨∏Íµ¨\/Ìå¨Ïãú$/,
    /^ÏÇ¨Î¨¥ÏßÄÎ•ò$/,
    /^ÏùºÎ∞òÏÇ¨Î¨¥$/,
    /^ÏÇ¨Î¨¥Í∏∞Í∏∞$/,
    /^ÌïòÎìúÏõ®Ïñ¥$/,
    /^Ï≤≠ÏÜå\/ÏúÑÏÉù$/,
    /^ÎîîÏßÄÌÑ∏\/Í∞ÄÏ†Ñ$/,
    /^ÏÉùÌôúÍ∞ÄÏ†Ñ$/,
    /^Ìú¥ÎåÄÌè∞\/Ïä§ÎßàÌä∏Ïö©Ìíà$/,
    /^Ïª¥Ìì®ÌÑ∞\/Ï£ºÎ≥ÄÍ∏∞Í∏∞$/,
    /^Ï£ºÎ∞©Í∞ÄÏ†Ñ$/,
    /^Í≥µÏÇ¨\/Ïù∏ÏáÑ$/,
    /^Í≥µÏÇ¨$/,
    /^Í¥ëÍ≥†\/ÎîîÏûêÏù∏$/,
    /^Ïù∏ÏáÑ$/,
    /^ÏÇ∞ÏóÖ\/ÏïàÏ†ÑÏö©Ìíà$/,
    /^Ï≤≠ÏÜåÏö©Ìíà$/,
    /^ÏÜåÎèÖ\/Î∞©Ïó≠$/,
    /^ÎßàÎåÄ$/,
    /^ÏÑ∏Ï†ú\/Ï†úÏßÄ\/ÏùºÏö©Ïû°Ìôî$/,
    /^ÏúÑÏÉùÏö©Ìíà$/,
    /^Ïä§Ìè¨Ï∏†\/Í±¥Í∞ï$/,
    /^ÏûêÏ†ÑÍ±∞\/Ìó¨Ïä§\/Îã§Ïù¥Ïñ¥Ìä∏$/,
    /^Îì±ÏÇ∞\/ÏïÑÏö∞ÎèÑÏñ¥\/Ï∫†Ìïë$/,
    /^ÏïÑÎèôÏö©Ìíà\/Ï∑®ÎØ∏$/,
    /^Ïú†ÏïÑ\/Í∞ÑÏãù$/,
    /^Ïû•ÎÇúÍ∞ê\/Ïú†ÏïÑÍµêÏú°\/Ïù∏Ìòï$/,
    /^Ï∑®ÎØ∏\/ÏûêÎèôÏ∞®\/Í≥µÍµ¨$/,
    /^Í∏∞ÌÉÄ$/,
    /^BESTÏÉÅÌíà$/,
    /^Í¥ÄÍ≥µÏÑúÍµ¨Îß§ÏÉÅÌíà$/,
    /^Í≥µÎèôÍµ¨Îß§ÏÉÅÌíà$/,
    /^Ïû•Ïï†Ïù∏\s*Í∏∞ÏóÖ\s*Ï†úÌíà$/,
    /^Ïû•Ïï†Ïù∏Í∏∞ÏóÖ\s*ÏãúÍ≥µÏóÖÏ≤¥$/,
    /^ÌÜ†ÎÑà\.?Î≥µÏÇ¨Ïö©ÏßÄ\.?ÏÇ¨Î¨¥Ïö©Ìíà\.?Ï†úÏßÄÎ•ò\.?Ï≤≠ÏÜåÏö©Ìíà$/,
    
    // Generic category indicators
    /^Ïπ¥ÌÖåÍ≥†Î¶¨$/,
    /^Î∂ÑÎ•ò$/,
    /^Î™©Î°ù$/,
    /^Ï†ÑÏ≤¥$/,
    /^ÎçîÎ≥¥Í∏∞$/,
    /^Î¶¨Ïä§Ìä∏$/,
    /^ÏÉÅÌíàÎ™©Î°ù$/,
    /^ÏÉÅÌíàÎ∂ÑÎ•ò$/,
    
    // Very short generic names (likely categories)
    /^[Í∞Ä-Ìû£]{1,3}$/,
    
    // Category-like patterns with slashes
    /^[Í∞Ä-Ìû£\/\s]+\/[Í∞Ä-Ìû£\/\s]+$/,
    
    // Empty or very generic names
    /^ÏÉÅÌíà$/,
    /^Ï†úÌíà$/,
    /^Î¨ºÌíà$/,
    /^ÌíàÎ™©$/
  ];
  
  // Find potential category products
  const potentialCategories: Product[] = [];
  const definiteProducts: Product[] = [];
  
  products.forEach(product => {
    const name = product.name || '';
    const isCategory = categoryPatterns.some(pattern => pattern.test(name.trim()));
    
    // Additional checks for category-like characteristics
    const hasNoQuantity = !/\d+\s*(g|kg|ml|L|Í∞ú|Ìè¨|Î≥ë|ÌÜµ|Ìå©|Î¶¨ÌÑ∞|Í∑∏Îû®|ÌÇ¨Î°ú|ÎØ∏ÌÑ∞|ÏÑºÏπò|Ïù∏Ïπò)/.test(name);
    const hasNoPrice = product.price === 0;
    const isTooGeneric = name.length < 5 && !/\d/.test(name);
    const hasSlashPattern = /\//.test(name) && !name.includes('[') && !name.includes('(');
    
    if (isCategory || (hasNoQuantity && hasNoPrice && isTooGeneric) || hasSlashPattern) {
      potentialCategories.push(product);
    } else {
      definiteProducts.push(product);
    }
  });
  
  // Group by mall to see which malls have category issues
  const categoryByMall: { [mall: string]: Product[] } = {};
  potentialCategories.forEach(product => {
    const mallId = product.mall?.mallId || 'unknown';
    if (!categoryByMall[mallId]) {
      categoryByMall[mallId] = [];
    }
    categoryByMall[mallId].push(product);
  });
  
  // Generate report
  const report = {
    timestamp: new Date().toISOString(),
    totalProducts: products.length,
    potentialCategories: potentialCategories.length,
    definiteProducts: definiteProducts.length,
    categoryByMall: Object.entries(categoryByMall).map(([mallId, categories]) => ({
      mallId,
      categoryCount: categories.length,
      categories: categories.map(c => ({
        id: c.id,
        name: c.name,
        price: c.price,
        category: c.category
      }))
    })),
    sampleCategories: potentialCategories.slice(0, 20).map(c => ({
      id: c.id,
      name: c.name,
      price: c.price,
      mall: c.mall?.mallName || 'Unknown'
    }))
  };
  
  writeFileSync('./scripts/output/category-products-analysis.json', JSON.stringify(report, null, 2));
  
  // Display results
  console.log('\nüìã Category Analysis Results:');
  console.log(`‚ùå Potential categories registered as products: ${potentialCategories.length}`);
  console.log(`‚úÖ Actual products: ${definiteProducts.length}`);
  console.log(`üìä Percentage of categories: ${((potentialCategories.length / products.length) * 100).toFixed(1)}%`);
  
  console.log('\nüè™ Categories by Mall:');
  Object.entries(categoryByMall).forEach(([mallId, categories]) => {
    console.log(`  ${mallId}: ${categories.length} categories`);
  });
  
  if (potentialCategories.length > 0) {
    console.log('\n‚ùå Sample Category Names Found:');
    potentialCategories.slice(0, 10).forEach((cat, i) => {
      console.log(`  ${i + 1}. "${cat.name}" (${cat.mall?.mallName || 'Unknown'}) - ‚Ç©${cat.price}`);
    });
  }
  
  console.log('\n‚úÖ Analysis saved to: ./scripts/output/category-products-analysis.json');
  
  return {
    potentialCategories,
    definiteProducts,
    categoryByMall
  };
}

// Run analysis
const result = identifyCategoryProducts();
export { result };