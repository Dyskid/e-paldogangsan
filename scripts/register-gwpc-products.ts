import { readFileSync, writeFileSync } from 'fs';
import { Product } from '../src/types';

interface ScrapedProduct {
  id: string;
  name: string;
  price: string;
  image: string;
  url: string;
}

// Generate tags based on product name
function generateTags(productName: string): string[] {
  const tags: string[] = ['ÌèâÏ∞ΩÌäπÏÇ∞Ìíà', 'Í∞ïÏõêÎèÑÌäπÏÇ∞'];
  const lowerName = productName.toLowerCase();
  
  // Beef products
  if (lowerName.includes('ÌïúÏö∞') || lowerName.includes('ÎåÄÍ¥ÄÎ†π')) {
    tags.push('ÌïúÏö∞', 'Ï∂ïÏÇ∞Î¨º', 'ÎåÄÍ¥ÄÎ†πÌïúÏö∞', 'ÌîÑÎ¶¨ÎØ∏ÏóÑÏú°Î•ò');
    if (lowerName.includes('Ïú°Ìè¨')) tags.push('Ïú°Ìè¨', 'Í±¥Ï°∞ÏãùÌíà');
    if (lowerName.includes('Î∂àÍ≥†Í∏∞')) tags.push('Î∂àÍ≥†Í∏∞');
    if (lowerName.includes('Îì±Ïã¨')) tags.push('Îì±Ïã¨');
    if (lowerName.includes('Ï±ÑÎÅù')) tags.push('Ï±ÑÎÅù');
  }
  
  // Dairy products
  if (lowerName.includes('ÏπòÏ¶à')) {
    tags.push('ÏπòÏ¶à', 'Ïú†Ï†úÌíà', 'Î∞úÌö®ÏãùÌíà');
  }
  if (lowerName.includes('ÏöîÍ±∞Ìä∏') || lowerName.includes('ÏöîÍµ¨Î•¥Ìä∏')) {
    tags.push('ÏöîÍ±∞Ìä∏', 'Ïú†Ï†úÌíà', 'Î∞úÌö®ÏãùÌíà');
  }
  
  // Organic products
  if (lowerName.includes('Ïú†Í∏∞ÎÜç')) {
    tags.push('Ïú†Í∏∞ÎÜç', 'ÏπúÌôòÍ≤Ω', 'Í±¥Í∞ïÏãùÌíà');
  }
  
  // Beverages and teas
  if (lowerName.includes('Ï∞®') || lowerName.includes('tea')) {
    tags.push('Ï∞®', 'ÏùåÎ£å', 'Í±¥Í∞ïÏ∞®');
  }
  if (lowerName.includes('Ïª§Ìîº')) {
    tags.push('Ïª§Ìîº', 'ÏùåÎ£å', 'ÏõêÎëê');
  }
  if (lowerName.includes('Ï¶ô')) {
    tags.push('Í±¥Í∞ïÏ¶ô', 'ÏùåÎ£å', 'Í±¥Í∞ïÏãùÌíà');
  }
  
  // Traditional foods
  if (lowerName.includes('Îì§Í∏∞Î¶Ñ')) {
    tags.push('Îì§Í∏∞Î¶Ñ', 'Ï†ÑÌÜµÏãùÌíà', 'Ï°∞ÎØ∏Î£å', 'Í±¥Í∞ïÏãùÌíà');
  }
  if (lowerName.includes('Ïò§ÎØ∏Ïûê')) {
    tags.push('Ïò§ÎØ∏Ïûê', 'Ï†ÑÌÜµÏãùÌíà', 'Í±¥Í∞ïÏãùÌíà', 'Í≥ºÏã§Ï≤≠');
  }
  if (lowerName.includes('ÎëêÏú†')) {
    tags.push('ÎëêÏú†', 'ÏùåÎ£å', 'ÏΩ©Ï†úÌíà', 'Í±¥Í∞ïÏãùÌíà');
  }
  
  // Gift sets
  if (lowerName.includes('ÏÑ†Î¨ºÏÑ∏Ìä∏') || lowerName.includes('ÏÑ∏Ìä∏')) {
    tags.push('ÏÑ†Î¨ºÏÑ∏Ìä∏', 'Í∏∞ÎÖêÌíà');
  }
  
  // Highland specialties
  if (lowerName.includes('Í≥†Îû≠ÏßÄ') || lowerName.includes('ÌèâÏ∞Ω')) {
    tags.push('Í≥†Îû≠ÏßÄÎÜçÏÇ∞Î¨º', 'ÌèâÏ∞ΩÌäπÏÇ∞');
  }
  
  // Olympic connection
  if (lowerName.includes('Ïò¨Î¶ºÌîΩ')) {
    tags.push('Ïò¨Î¶ºÌîΩÍ∏∞ÎÖêÌíà');
  }
  
  // Quality certifications
  if (lowerName.includes('ÌíàÏßàÏù∏Ï¶ù')) {
    tags.push('ÌíàÏßàÏù∏Ï¶ù');
  }
  
  // Traditional or local
  if (lowerName.includes('ÏãúÍ≥®') || lowerName.includes('Ï†ÑÌÜµ')) {
    tags.push('Ï†ÑÌÜµÏãùÌíà');
  }
  
  return [...new Set(tags)]; // Remove duplicates
}

// Normalize category based on product type
function normalizeCategory(productName: string): string {
  const lowerName = productName.toLowerCase();
  
  if (lowerName.includes('ÌïúÏö∞') || lowerName.includes('Ïú°Ìè¨')) {
    return 'Ï∂ïÏÇ∞Î¨º';
  }
  if (lowerName.includes('ÏπòÏ¶à') || lowerName.includes('ÏöîÍ±∞Ìä∏')) {
    return 'Ïú†Ï†úÌíà';
  }
  if (lowerName.includes('Ï∞®') || lowerName.includes('Ïª§Ìîº') || lowerName.includes('Ï¶ô') || lowerName.includes('ÎëêÏú†')) {
    return 'ÏùåÎ£å';
  }
  if (lowerName.includes('Îì§Í∏∞Î¶Ñ') || lowerName.includes('Ïò§ÎØ∏Ïûê')) {
    return 'Í∞ÄÍ≥µÏãùÌíà';
  }
  if (lowerName.includes('ÏÑ†Î¨ºÏÑ∏Ìä∏')) {
    return 'ÏÑ†Î¨ºÏÑ∏Ìä∏';
  }
  
  return 'Í∏∞ÌÉÄÌäπÏÇ∞Ìíà';
}

// Parse price from string
function parsePrice(priceStr: string): number {
  const numericPrice = parseInt(priceStr.replace(/[^0-9]/g, ''));
  return isNaN(numericPrice) ? 0 : numericPrice;
}

async function registerGwpcProducts() {
  console.log('üöÄ Starting ÌèâÏ∞ΩÎ™∞ product registration...');
  
  try {
    // Read scraped products
    const gwpcProductsData = readFileSync('./scripts/output/gwpc-products.json', 'utf8');
    const gwpcProducts: ScrapedProduct[] = JSON.parse(gwpcProductsData);
    
    console.log(`üì¶ Found ${gwpcProducts.length} products to register`);

    // Read existing products database
    const productsData = readFileSync('./src/data/products.json', 'utf8');
    const existingProducts: Product[] = JSON.parse(productsData);
    
    console.log(`üìö Current database has ${existingProducts.length} products`);

    // Remove any existing GWPC products to avoid duplicates
    const nonGwpcProducts = existingProducts.filter(p => p.mall?.mallId !== 'gwpc-mall');
    console.log(`üóëÔ∏è Removed ${existingProducts.length - nonGwpcProducts.length} existing GWPC products`);

    // Process and register new products
    const newProducts: Product[] = [];
    let productsWithPrices = 0;
    let skippedProducts = 0;
    
    const mallInfo = {
      mallId: 'gwpc-mall',
      mallName: 'ÌèâÏ∞ΩÎ™∞',
      mallUrl: 'https://gwpc-mall.com',
      region: 'Í∞ïÏõêÎèÑ'
    };
    
    for (const scrapedProduct of gwpcProducts) {
      // Parse price
      const price = parsePrice(scrapedProduct.price);
      
      if (price <= 0) {
        console.log(`‚ö†Ô∏è Skipping product with invalid price: ${scrapedProduct.name}`);
        skippedProducts++;
        continue;
      }
      
      productsWithPrices++;
      
      // Generate tags and category
      const tags = generateTags(scrapedProduct.name);
      const category = normalizeCategory(scrapedProduct.name);
      
      // Create product object
      const product: Product = {
        id: scrapedProduct.id,
        name: scrapedProduct.name,
        price: price,
        image: scrapedProduct.image,
        category: category,
        region: 'Í∞ïÏõêÎèÑ',
        url: scrapedProduct.url,
        description: '',
        tags: tags,
        isFeatured: Math.random() < 0.15, // 15% chance to be featured
        isNew: true,
        mall: mallInfo
      };
      
      newProducts.push(product);
      console.log(`‚úÖ ${productsWithPrices}/${gwpcProducts.length} Registered: ${product.name} - ‚Ç©${price.toLocaleString()} (${category})`);
    }
    
    // Combine all products
    const allProducts = [...nonGwpcProducts, ...newProducts];
    
    // Save updated products database
    writeFileSync('./src/data/products.json', JSON.stringify(allProducts, null, 2), 'utf8');
    
    // Calculate statistics
    const totalProducts = allProducts.length;
    const categoryStats = newProducts.reduce((acc, product) => {
      acc[product.category] = (acc[product.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    const tagStats = newProducts.reduce((acc, product) => {
      product.tags.forEach(tag => {
        acc[tag] = (acc[tag] || 0) + 1;
      });
      return acc;
    }, {} as Record<string, number>);
    
    const averagePrice = newProducts.length > 0 ? 
      Math.round(newProducts.reduce((sum, p) => sum + p.price, 0) / newProducts.length) : 0;
    
    const priceRange = {
      min: newProducts.length > 0 ? Math.min(...newProducts.map(p => p.price)) : 0,
      max: newProducts.length > 0 ? Math.max(...newProducts.map(p => p.price)) : 0
    };
    
    // Generate summary
    const summary = {
      timestamp: new Date().toISOString(),
      mall: {
        name: 'ÌèâÏ∞ΩÎ™∞',
        url: 'https://gwpc-mall.com',
        region: 'Í∞ïÏõêÎèÑ'
      },
      registration: {
        totalProductsScraped: gwpcProducts.length,
        successfullyRegistered: newProducts.length,
        skipped: skippedProducts,
        totalInDatabase: totalProducts
      },
      statistics: {
        averagePrice,
        priceRange,
        categoryDistribution: categoryStats,
        topTags: Object.entries(tagStats)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 10)
          .map(([tag, count]) => ({ tag, count }))
      },
      sampleProducts: newProducts.slice(0, 5).map(p => ({
        name: p.name,
        price: `‚Ç©${p.price.toLocaleString()}`,
        category: p.category,
        tags: p.tags.slice(0, 5)
      }))
    };
    
    // Save registration summary
    writeFileSync('./scripts/output/gwpc-registration-summary.json', JSON.stringify(summary, null, 2), 'utf8');
    
    // Console summary
    console.log('\nüìä Registration Summary:');
    console.log(`üè™ Mall: ÌèâÏ∞ΩÎ™∞ (Í∞ïÏõêÎèÑ)`);
    console.log(`üì¶ Products scraped: ${gwpcProducts.length}`);
    console.log(`‚úÖ Successfully registered: ${newProducts.length}`);
    console.log(`‚è≠Ô∏è Skipped (no price): ${skippedProducts}`);
    console.log(`üìö Total products in database: ${totalProducts}`);
    console.log(`üí∞ Average price: ‚Ç©${averagePrice.toLocaleString()}`);
    console.log(`üíµ Price range: ‚Ç©${priceRange.min.toLocaleString()} - ‚Ç©${priceRange.max.toLocaleString()}`);
    
    console.log('\nüìÇ Category breakdown:');
    Object.entries(categoryStats)
      .sort(([,a], [,b]) => b - a)
      .forEach(([category, count]) => {
        console.log(`  ${category}: ${count}Í∞ú`);
      });
    
    console.log('\nüè∑Ô∏è Top 10 tags:');
    summary.statistics.topTags.forEach(({ tag, count }) => {
      console.log(`  ${tag}: ${count}Í∞ú`);
    });
    
    console.log('\nüéØ Sample products registered:');
    summary.sampleProducts.forEach((product, i) => {
      console.log(`  ${i + 1}. ${product.name}`);
      console.log(`     ${product.price} - ${product.category}`);
      console.log(`     Tags: ${product.tags.join(', ')}`);
    });
    
    console.log(`\nüíæ Registration summary saved to: ./scripts/output/gwpc-registration-summary.json`);
    
    console.log('\nüéâ ÌèâÏ∞ΩÎ™∞ product registration completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error during product registration:', error);
    throw error;
  }
}

// Run registration
registerGwpcProducts()
  .then(() => {
    console.log('‚úÖ Registration process completed successfully!');
  })
  .catch((error) => {
    console.error('üí• Registration failed:', error);
    process.exit(1);
  });